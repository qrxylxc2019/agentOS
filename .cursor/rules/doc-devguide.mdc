---
description: 
globs: 
alwaysApply: true
---
# AgentOS SDK 项目开发规则

## 重要：每次对话开始时必须加载的上下文文档
在开始任何开发任务前，必须先阅读以下关键文档：

[README.md](mdc:README.md)
@Agent/v0.3.5/
@Robot/v11.3C/
[FAQ.md](mdc:FAQ.md)

## 1. 文档说明

### 📖 **AgentOS_SDK_Doc_x.x.x.md**
大模型相关能力接口和使用方法，包含对话管理、语音合成、智能交互等功能。

### 📋 **API_Reference.md**
AgentOS SDK v0.3.5 完整的API参考文档，详细描述所有核心类、接口、方法、属性、构造函数、参数说明、返回值、使用示例等。

### 🤖 **RobotAPI.md**
机器人原生控制接口，包含底层运动控制、导航、传感器信息等功能。

### 📁 **ClassPathList.md**
提供项目中所有关键类的完整包路径清单，包含 AgentOS SDK 和 RobotOS SDK 的所有核心 import 路径。

### 💻 **SampleCodes.md**
提供各功能模块的典型示例代码，供开发参考和快速实现。包含完整的依赖配置、Agent 实现、Action 系统、核心API使用等示例。


---

## 2. 技术栈要求

- **编程语言：** Java 和 Kotlin
- **构建工具：** Gradle
- **平台：** Android（最低API 26）
- **JDK版本：** Java 11

---

## 3. SDK使用规范

### 3.1 文档查阅优先级 ⚠️**重要**

**任何开发需求或编译运行错误，与 Agent 或 Robot 相关的问题，必须严格按照以下优先级查阅资料：**

#### 🥇 **第一优先级：完整查阅项目文档**

**按问题类型查阅对应文档：**
- **Agent 开发问题**：优先查阅 **AgentOS_SDK_Doc_v0.3.5.md**（了解功能接口）→ **API_Reference.md**（获取详细API说明）
- **Robot 控制问题**：优先查阅 **RobotAPI.md**（了解底层控制接口）
- **代码实现问题**：参考 **SampleCodes.md**（获取完整示例代码）
- **导入路径问题**：确认 **ClassPathList.md**（获取正确的包路径）

#### 🥈 **第二优先级：项目文档无相关资料时**
- 仅在项目文档中完全没有任何相关信息时，才可查阅网络资料或Android官方标准文档

❌ **严禁在未完整查阅项目文档的情况下直接使用网络资料或通用Android开发资料！**

### 3.2 ⚠️**极其重要：AgentOS SDK依赖配置规范**

**AgentOS SDK的依赖引入必须严格按照 AgentOS_SDK_Doc_v0.3.5.md 文档中"1.2 快速开始"章节进行配置，任何偏差都可能导致编译失败或运行异常！**

- ❌ **严禁随意修改Maven仓库配置、SDK版本号、actionRegistry.json文件路径**
- ⚠️ **必须完全按照文档要求配置settings.gradle.kts、app/build.gradle.kts和actionRegistry.json**
- 🔍 **配置完成后必须执行 `./gradlew clean build` 验证编译通过**

### 3.3 具体使用规范

- 所有机器人控制功能必须基于 RobotOS SDK 开发，RobotOS SDK 提供了摄像头、视觉、底盘运动、室内地图、导航等多个能力
- 所有大模型 Agent 开发功能必须基于 AgentOS SDK 开发
- 开发时优先参考示例代码，结合类路径清单确认正确导入

⚠️ **重要：所有API使用必须参考 API_Reference.md 中的详细说明，包括方法签名、参数类型、返回值、使用注意事项等**

⚠️ **重要：所有关于AgentOS和RobotOS的 import 语句必须参考 ClassPathList.md 中的完整路径清单，确保导入路径正确无误**

⚠️ **重点关注：** ParameterType 枚举类型、LLMConfig、LLMMessage 等 Agent 相关类的数据结构，需要严格按照规范使用

---

## 4. 开发规范

### 4.1 通用代码规范

- 遵循 Android 平台开发最佳实践
- 使用项目统一的命名规范和代码风格
- 如遇接口调用异常，优先排查文档示例与导入路径是否匹配
- 除非用户要求，否则不要主动给用户创建各种 README 一类的总结说明文档或者任何开发总结等，不要自动生成总结

### 4.2 Action 开发规范

⚠️ **重要：actionRegistry.json 文件是项目必需的配置文件，其中的 appid 是 AgentCore.appId 的来源**

- 使用 Action 时必须了解所有可用的构造函数：完整构造函数、外部Action构造函数（仅需name）、内部Action构造函数（自动使用AgentCore.appId）
- 系统 Action 的使用必须参考 Actions.kt 中的完整列表，包括系统指令类Action和系统内置应用类Action
- Action 参数命名使用英文，多个单词用下划线连接，避免与 Action 或 Parameter 对象的属性名相同
- 每个 Action 执行完成后必须调用 `action.notify()` 方法
- 动态注册 Action 需要设置 executor
- 静态注册 Action 需要在 actionRegistry.json 中配置
- 一个 App 只能有一个 AppAgent 实例
- 每个页面只能有一个 PageAgent 实例

### 4.3 异步处理规范

- ⚠️ **ActionExecutor.onExecute() 方法有2秒超时限制，耗时操作必须使用协程或线程池异步执行**
  - Kotlin: 使用协程 `AOCoroutineScope.launch { // 协程代码 }`
  - Java: 使用线程池 `AsyncTaskHelper.execute(() -> { // 线程代码 });`
- ⚠️ **在Action的回调中所有 TTS、LLM 等异步操作完成后才能调用 action.notify()，意味着action已经处理完毕**
- 使用 TaskResult<T> 处理异步任务结果，通过 status 判断成功失败（1=成功，2=失败）

### 4.4 UI 开发规范

- 目标设备屏幕唯一规格：物理分辨率 1920 × 1080px，屏幕密度 3.5，逻辑分辨率约 500 × 308dp
- 如果可能就用xml创建UI，则不要创建单独的适配文件，统一在 layout 文件夹处理响应式布局。不用单独设置 `android:screenOrientation="landscape"`
- 页面设计的更简洁大方紧凑一些，文字和组件更小。不要嵌套多层，不要超出屏幕或者宽高比不协调

### 4.5 页面信息和语音交互规范

- **页面信息上传**：当页面级别人设目标无法覆盖的场景时，需要通过更新上下文信息来通知大模型理解当前页面内容
- **语音交互实现**：通过打开麦克风实现，大模型会自动根据用户语音匹配到对应的 Action
- **LLM接口调用**：仅在业务场景复杂、普通 Action 难以实现、需要语音文本之外其他参数的业务时，才调用 llm 等大模型接口

---

## 5. 语言差异

### 5.1 Kotlin vs Java 代码区别 ⚠️**重要**

**严格区分 Kotlin 和 Java 语法，不得混用！生成代码时必须严格按照对应语言的语法规范：**

#### 🔵 **Kotlin 代码特点：**
- 空安全语法：`?.` `!!` `?:`
- 可空类型声明：`String?`

#### 🟠 **Java 代码特点：**
- 传统空值检查：`if (obj != null)`
- 非空类型默认，需要手动检查null
- ⚠️ **没有默认参数**：必须传递所有参数

#### 🔄 **关键API调用差异：**
- **AgentCore调用：**
  - Kotlin: `AgentCore.methodName()`
  - Java: `AgentCore.INSTANCE.methodName()`

- **监听器实现：**
  - Kotlin: `object : OnTranscribeListener { }`
  - Java: `new OnTranscribeListener() { }`
- **方法参数：**
  - Kotlin: 支持默认参数，可省略部分参数
  - Java: 无默认参数，必须传递所有参数

#### ❌ **常见Java参数错误示例：**
- ❌ `AgentCore.INSTANCE.tts("hello")` // 缺少必需参数
- ✅ `AgentCore.INSTANCE.tts("hello", 5000, null)` // 所有参数都传递

⚠️ **重要：严禁混用两种语言的语法！**

---

## 6. 开发流程

⚠️ **重要：开发过程中严格遵循第3节SDK使用规范、第4节开发规范、第5节语言差异中的所有要求**

1. **📚 开发前准备**：完整阅读项目文档，确认开发语言（Kotlin/Java）
2. **🔧 集成 AgentOS SDK**：配置仓库、添加依赖、创建 actionRegistry.json 配置文件
3. **🎭 设定 App 的人设目标风格**
4. **📱 创建业务页面**：根据需求确定是否需要页面级别人设目标风格
5. **⚡ 定义并注册 Action 到 AgentOS SDK**
6. **💻 实现 Action 的处理逻辑**：遵循第4.3节异步处理规范
7. **📄 上传页面信息**：根据需求决定是否需要上传页面信息
8. **🎤 用户语音和大模型交互**：实现语音交互功能
9. **💬 需要主动跟用户交流的场景**：考虑主动调用 followup 或者代替用户调用 query
10. **🧹 App 和页面关闭的时候**：按需清理一些上下文和页面信息
11. **🧪 测试语音触发和 Action 执行**
12. **🐛 问题解决**：遇到问题时重新查阅项目文档和开发流程，遵循第3.1节文档查阅优先级

